CREATE TABLE EMP(
   E_ID NUMBER PRIMARY KEY,
   NAME VARCHAR(50),
   SALARY NUMBER,
   DEPARTMENT NUMBER  );


INSERT INTO EMP(E_ID, NAME, SALARY, DEPARTMENT) VALUES(101, 'Jane Doe', 6000, 20);

INSERT INTO EMP(E_ID, NAME, SALARY, DEPARTMENT) VALUES(102, 'Alice', 10000, NULL);

INSERT INTO EMP(E_ID, NAME, SALARY, DEPARTMENT) VALUES(103, 'Alice', 100000, 2000);

INSERT INTO EMP(E_ID, NAME, SALARY, DEPARTMENT) VALUES(104, 'Sam', 60000, 30);
INSERT INTO EMP(E_ID, NAME, SALARY, DEPARTMENT) VALUES(105, 'Ben', 6000, 30);

SELECT * FROM EMP;

---------------------------IMPLECIT AND EXPLICIT CUSTOR----------------------------------

-------------------------------------------------

DECLARE
    MYRECORD EMP%ROWTYPE;
BEGIN
    SELECT E_ID, NAME, DEPARTMENT, SALARY INTO MYRECORD FROM EMP
    WHERE NAME = 'Jane Doe';
    DBMS_OUTPUT.PUT_LINE(MYRECORD.E_ID || ' ' || MYRECORD.NAME || ' ' || MYRECORD.SALARY);
END;

--------------------CURSOR--------------------------

DECLARE

BEGIN
DELETE FROM EMP WHERE NAME='Alice';
DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT || ' IS DELETED');
END;

----------------------------------DECLARE CURSOR-----------------------

DECLARE
    CURSOR MY_CURSOR IS
        SELECT E_ID, NAME, SALARY FROM EMP
        WHERE DEPARTMENT = 30;
     
    EMP_ID EMP.E_ID%TYPE;
    SALARY NUMBER;
    NAME VARCHAR2(100);

BEGIN
    OPEN MY_CURSOR;
    LOOP
        FETCH MY_CURSOR INTO EMP_ID, NAME, SALARY;
        EXIT WHEN MY_CURSOR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(EMP_ID || ' ' || NAME || ' ' || SALARY);
    END LOOP;
    CLOSE MY_CURSOR;
END;

------------------- TO DECLARE WHOLE VARIABLE IN THE TABLE -----------------------------
DECLARE
    CURSOR MY_CURSOR IS
        SELECT E_ID, NAME, SALARY FROM EMP
        WHERE DEPARTMENT = 30;
     
    EMPRECORD MY_CURSOR%ROWTYPE;

BEGIN
    OPEN MY_CURSOR;
    LOOP
        FETCH MY_CURSOR INTO EMPRECORD;
        EXIT WHEN MY_CURSOR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(EMPRECORD.E_ID || ' ' || EMPRECORD.NAME || ' ' || EMPRECORD.SALARY);
    END LOOP;
    CLOSE MY_CURSOR;
END;

-------------------FOR LOOP-------------------------


----------------------------------------------------

DECLARE
     CURSOR U_CURSOR IS 
     SELECT * FROM EMP WHERE DEPARTMENT = 30;
     T_REC U_CURSOR%ROWTYPE;
BEGIN
     IF NOT U_CURSOR%ISOPEN
     THEN
         OPEN U_CURSOR;
     END IF;
LOOP
    FETCH U_CURSOR INTO T_REC;
    EXIT WHEN U_CURSOR%NOTFOUND OR U_CURSOR%ROWCOUNT <3;
    DBMS_OUTPUT.PUT_LINE(T_REC.E_ID || ' ' || T_REC.NAME || ' ' || T_REC.SALARY);
END LOOP;
CLOSE U_CURSOR;
END;

-----------------------------------------JOIN EMP AND DEPARTMENT TABLE---------------------

DECLARE
    CURSOR JOIN_CURSOR IS
        SELECT * FROM EMPLOYEES JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID;
    REC JOIN_CURSOR%ROWTYPE;
BEGIN
    IF NOT JOIN_CURSOR%ISOPEN THEN
        OPEN JOIN_CURSOR;
    END IF;
    LOOP
        FETCH JOIN_CURSOR INTO REC;
        EXIT WHEN JOIN_CURSOR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(REC.NAME || ' ' || REC.DEPARTMENT_ID);
    END LOOP;
    CLOSE JOIN_CURSOR;
END;    

DECLARE
    CURSOR emp_cursor IS 
        SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, E.DEPARTMENT_ID 
        FROM EMPLOYEES E 
        JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

BEGIN
    FOR emprecord IN emp_cursor LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || emprecord.EMPLOYEE_ID || ', Name: ' || emprecord.FIRST_NAME || ', Salary: ' || emprecord.SALARY);
    END LOOP;
END;


--------------CURSOR WHITH PARAMETERS----------------------

DECLARE
    CURSOR MY_CURSOR(DEPT_ID NUMBER) IS
        SELECT E_ID, NAME, SALARY FROM EMP WHERE DEPARTMENT = DEPT_ID;
    REC MY_CURSOR%ROWTYPE;
BEGIN
    OPEN MY_CURSOR(10);
    LOOP 
        FETCH MY_CURSOR INTO REC;
        EXIT WHEN MY_CURSOR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(REC.E_ID || ' ' || REC.NAME || ' ' || REC.SALARY);
    END LOOP;
    CLOSE MY_CURSOR;
    
    DBMS_OUTPUT.PUT_LINE('-----------------------------');
    
    OPEN MY_CURSOR(30);
    LOOP 
        FETCH MY_CURSOR INTO REC;
        EXIT WHEN MY_CURSOR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(REC.E_ID || ' ' || REC.NAME || ' ' || REC.SALARY);
    END LOOP;
    CLOSE MY_CURSOR;
END;

-----------------------------EXCEPTIONS-------------------------------
---------------IMPLICIT (PRE BILUD)----------------

----------------EXPLICIT (USER BILUD)-------------------

DECLARE
    V_EMP_ID EMPLOYEES.EMPLOYEE_ID%TYPE :=10100;
    V_SALARY EMPLOYEES.SALARY%TYPE;
BEGIN
     SELECT SALARY INTO V_SALARY
     FROM EMPLOYEES
     WHERE EMPLOYEE_ID = V_EMP_ID;
   
     DBMS_OUTPUT.PUT_LINE('SALARY: ' || V_SALARY);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('ERROR: NO EMPLOYEE FOUND ' || V_EMP_ID);
END;

----------------------------------------------------------
DECLARE
    V_DEP_ID EMPLOYEES.DEPARTMENT_ID%TYPE := 24000;
    V_SALARY EMPLOYEES.SALARY%TYPE;
    V_DEP EMPLOYEES.DEPARTMENT_ID%TYPE;
BEGIN
    SELECT DEPARTMENT_ID INTO V_DEP
    FROM EMPLOYEES
    WHERE SALARY = V_SALARY;

    DBMS_OUTPUT.PUT_LINE('DEPARTMENT: ' || V_DEP);
EXCEPTION
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: MORE THAN ONE EMPLOYEE');
END;


DECLARE
    V_DEP_ID EMPLOYEES.DEPARTMENT_ID%TYPE := 2400; -- Assuming the value 2400 fits within the allowed range
    V_SALARY EMPLOYEES.SALARY%TYPE;
    V_DEP EMPLOYEES.DEPARTMENT_ID%TYPE;
BEGIN
    SELECT DEPARTMENT_ID INTO V_DEP
    FROM EMPLOYEES
    WHERE SALARY = V_SALARY;

    DBMS_OUTPUT.PUT_LINE('DEPARTMENT: ' || V_DEP);
EXCEPTION
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: MORE THAN ONE EMPLOYEE');
END;


--------------------------------------------------------

DECLARE
   V_EMP_ID NUMBER := 101;
   V_SALARY NUMBER;
   V_BONUS_PERCENT NUMBER := 0;
   V_BONUS NUMBER;

BEGIN
   SELECT SALARY INTO V_SALARY
   FROM EMPLOYEES
   WHERE EMPLOYEE_ID = V_EMP_ID;
   
   V_BONUS := V_SALARY / V_BONUS_PERCENT;
   DBMS_OUTPUT.PUT_LINE('BONUS:' || V_BONUS);
EXCEPTION
   WHEN ZERO_DIVIDE THEN
   DBMS_OUTPUT.PUT_LINE('ERROR: DIVIDE ZERO IS NOT POSSIBLE');
END;

-------------------------------------------MORE EXCEPTIONS--------------------------------

DECLARE
 v_emp_id NUMBER := 117;
 v_emp_name VARCHAR2(100) := 'Sundaram';
 v_salary NUMBER := 10000;
 v_department NUMBER := 2000;
BEGIN
 INSERT INTO EMP(E_ID, NAME, SALARY, DEPARTMENT)
 VALUES (v_emp_id, v_emp_name, v_salary, v_department);
EXCEPTION
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('ERROR: EMPLOYEE ALREADY EXISTS');
  WHEN VALUE_ERROR THEN
    DBMS_OUTPUT.PUT_LINE('ERROR: INVALID VALUE ENCOUNTERED');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR: UNEXPECTED ERROR OCCURRED');
END;

-----------------------------------------------------------

DECLARE
 V_EMP_ID NUMBER := 101;
 V_COUNT NUMBER :=0;
 EMPLOYEE_EXISTS EXCEPTION;
BEGIN
 SELECT COUNT(*) INTO V_COUNT FROM EMP WHERE E_ID = V_EMP_ID;

 IF V_COUNT > 0 THEN
   RAISE EMPLOYEE_EXISTS;
 END IF;
EXCEPTION
 WHEN EMPLOYEE_EXISTS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR:EMPLOYEE ID ' || V_EMP_ID || ' ALREAY EXISTS.');
END;

--------------------------------

DELARE
   V_EMP_ID NUMBER := 200;
   V_NEW_SALARY NUMBER := 21000;
   SALARY_TOO_LOW EXPECTION;
BEGIN
   IF V_NEW_SALARY < 20000 THEN
       RAISE SALARY_TOO_LOW;
   END IF;
   
   UPDATE EMPLOYEES
   SET SALARY = V_NEW_SALARY
   WHERE EMPLOYEE_ID = V_EMP_ID;
   
   DBMS_OUTPUT.PUT_LINE('SALARY UPDATED SUCCESSFULLY');
EXCEPTION
  WHEN SALARY_TOO_LOW THEN
  DBMS_OUTPUT.PUT_LINE('ERROR: SALARY CANNOT BE LESSTHAN 20000');
END;


---------------PROCEDURE-------------------------

-----------------CREATE A PROCEDURE---------------------

CREATE OR REPLACE PROCEDURE PROC_1
AS
BEGIN
DBMS_OUTPUT.PUT_LINE('WELCOME TO PROCEDURES');
END;

----------------CALLING PROCEDURE----------------------

BEGIN
 PROC_1;
END;

-------------------------------------------

CREATE OR REPLACE PROCEDURE PROC2 (EMP_ID IN NUMBER)
AS
REC EMP%ROWTYPE;
BEGIN
SELECT * INTO REC FROM EMP WHERE E_ID = EMP_ID;
DBMS_OUTPUT.PUT_LINE(REC.NAME || ' ' || REC.SALARY);
END;


BEGIN
PROC2(104);
END;

---------------------------------------------------------

CREATE OR REPLACE PROCEDURE SQUAREOFNUMBER(X IN NUMBER, SQUARE OUT NUMBER)
AS
BEGIN
SQUARE := X*X;
END;


DECLARE
ROOT NUMBER;
BEGIN
SQUAREOFNUMBER(5, ROOT);
DBMS_OUTPUT.PUT_LINE('THE SQUARE OF 5 IS ' || ROOT);
END;

------------------------------------------------------------

CREATE PROCEDURE PROC3 (EMP_ID IN NUMBER, NAME OUT VARCHAR, SALARY OUT NUMBER)
AS
BEGIN
SELECT NAME,SALARY INTO NAME, SALARY FROM EMP WHERE E_ID = EMP_ID;
END;


DECLARE
NAME VARCHAR(20);
SALARY NUMBER;
BEGIN
PROC3(104,NAME,SALARY);
DBMS_OUTPUT.PUT_LINE(NAME);
END;

----------------------------------------------------SWAP TO NUMBERS USING PROCEDURES----------------------

CREATE OR REPLACE PROCEDURE SWAPTWO(X IN OUT NUMBER, Y IN OUT NUMBER)
AS
   TEMP NUMBER;
BEGIN
   TEMP := X;
   X := Y;
   Y := TEMP;
END;



DECLARE
 X NUMBER :=3;
 Y NUMBER :=5;
BEGIN
  DBMS_OUTPUT.PUT_LINE('BEFORE SWAP' || X || Y);
  SWAPTWO(X,Y)
  DBMS_OUTPUT.PUT_LINE('AFTER SWAP' || X || Y);
END;  


